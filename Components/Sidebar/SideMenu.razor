@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR
@using Slackiffy.Data
@inject ConnectionManager ConnectionManager
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net  
@using Slackiffy.Services.Messages
@using Slackiffy.Models.DTO
@using System.Security.Claims
@inject AuthenticationStateProvider authProvider 
@inject IMessageService messagingService
@implements IAsyncDisposable

<AuthorizeView>
    <div class="w-4/5 flex overflow-y-scroll scrollbar">
        <div class="w-full">
            <TeamAccountInfo/>

            <div class="">
                <ul class="py-2">
                    <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="font-semibold iconify text-white mt-1 mr-1" data-icon="ci:menu-alt-01" data-width="23" data-flip="horizontal"></span>
                            <h2 class="font-semibold text-lg text-white">All unreads</h2>
                        </div>
                    </li>
                        <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-1" data-icon="clarity:chat-bubble-line" data-width="22"></span>
                            <h2 class="text-base text-white">Threads</h2>
                        </div>
                    </li>
                        <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-1" data-icon="ion:at" data-width="22"></span>
                            <h2 class="text-base text-white">Mentions & reactions</h2>
                        </div>
                    </li>
                    <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-2" data-icon="material-symbols:file-copy-outline-rounded" data-width="22"></span>
                            <h2 class="text-base text-white">File browser</h2>
                        </div>
                    </li>
                    <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="iconify text-white mr-1 mt-1" data-icon="ant-design:down-outlined" data-width="18"></span>
                            <h2 class="text-sm text-white">Show more</h2>
                        </div>
                    </li>
                </ul>
                <ul class="py-2">
                    <li class="py-2 pl-4 cursor-pointer">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-2" data-icon="ant-design:caret-down-outlined" data-width="18"></span>
                            <h2 class="text-base text-white">Channels</h2>
                        </div>
                    </li>
                </ul>
                <ul class="py-2">
                    <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-2" data-icon="akar-icons:plus" data-width="18"></span>
                            <h2 class="text-base text-white">Add Channel</h2>
                        </div>
                    </li>
                    <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-2" data-icon="ph:hash" data-width="18"></span>
                            <h2 class="text-base text-white">blazor-engineering</h2>
                        </div>
                    </li>
                </ul>
                <ul class="py-2">
                    <li class="py-2 pl-4 cursor-pointer">
                        <div class="flex">
                            <span class="iconify text-white mt-1 mr-2" data-icon="ant-design:caret-down-outlined" data-width="18"></span>
                            <h2 class="text-base text-white">Direct Messages</h2>
                        </div>
                    </li>
                </ul>
               <ul class="py-2">
                    @foreach (var user in previousChatUserList)
                    {
                        var userId = context.User.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).SingleOrDefault()?.Value;
                        var username = context.User.Claims.Where(c => c.Type == ClaimTypes.Name).SingleOrDefault().Value;

                        @if(user.UserId == userId)
                        {
                            var url = $"/client/DM-{userId}";
                            <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                                <NavLink class="nav-link flex text-white" href="@url">
                                    <span class="iconify mt-1 mr-2" data-icon="carbon:user-online" style="color: white;" data-width="20"></span>
                                    @username
                                </NavLink>
                            </li>
                        }
                        @if(user.UserId != userId)
                        {
                            var url = $"/client/DM-{userId}";
                            <li class="py-2 pl-4 cursor-pointer hover:bg-neutral-900/50">
                                <NavLink class="nav-link flex text-white" href="@url">
                                    <span class="iconify mt-1 mr-2" data-icon="carbon:user-online" style="color: white;" data-width="20"></span>
                                    @username
                                </NavLink>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
</AuthorizeView>

@code {
    public bool IsActive { get; set; } = false;

    private HubConnection hubConnection;
    private Dictionary<string, HashSet<string>> UserList;
    private ICollection<UsersForListingDTO> previousChatUserList { get; set; }
        = new List<UsersForListingDTO>();

    [Inject]
    public CookiesProvider CookiesProvider { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var container = new System.Net.CookieContainer();
        var cookie = new Cookie() 
        {
            Name = "SlackiffyAuthCookie", 
            Domain = "localhost",
            Value = CookiesProvider.Cookie
        };

        container.Add(cookie); 

        if(CookiesProvider.Cookie == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chat"))
            .Build();
        }
        else
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chat"), options =>
            {
                options.Cookies = container;  
            }).Build();
        }

        hubConnection.On<string>("UserDisconnected", userId =>
        {
            var user = this.previousChatUserList.Where(u => u.UserId == userId).FirstOrDefault();

            this.previousChatUserList.Remove(user);

            InvokeAsync(() => StateHasChanged());
        });

        hubConnection.On<Dictionary<string, HashSet<string>>>("ReceiveInitializeUserList", ( list) =>
        {
            foreach (var user in list)
            {
                var dataArray = user.Key.Split("-");
                var userName = dataArray[0];
                var userId = dataArray[1];

                var userExist = this.previousChatUserList.Any(user => user.UserId == userId);

                if(!userExist)
                {
                     this.previousChatUserList.Add(new UsersForListingDTO
                        {
                            UserId = userId,
                            Username = userName,
                            Picture = ""
                        });
                }
               
            }

            InvokeAsync(() => StateHasChanged());
        });

        //hubConnection.On<UsersForListingDTO>("JoinedUser", (user) =>
        //{
        //    previousChatUserList.Add(user);
        //});

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("InitializeUserList");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
